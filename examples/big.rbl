extern "C" fn genf() -> Ref<i32>;
extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_add_points_rust();
}

extern "C" fn add_points_rust(a: Point, b: Point) -> Point;

struct Point {
    x: i64,
    y: i64,
    z: i64,
}

fn new_point(x: i64, y: i64, z: i64) -> Point {
    Point { x: x, y: y, z: z }
}

fn test_add_points_rust() {
    let a: Point = new_point(1, 2, 3);
    let b: Point = new_point(4, 5, 6);
    let c: Point = add_points_rust(a, b);
    assert_eq(c.x, 5);
    assert_eq(c.y, 7);
    assert_eq(c.z, 9);
}extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_point_add();
}

struct Point {
    x: i64,
    y: i64,
    z: i64,
}

fn new_point(x: i64, y: i64, z: i64) -> Point {
    return Point { x: x, y: y, z: z };
}

fn add_points(a: Point, b: Point) -> Point {
    return Point {
        x: a.x + b.x,
        y: a.y + b.y,
        z: a.z + b.z
    };
}

fn test_point_add() -> i64 {
    let a: Point = new_point(1, 2, 3);
    let b: Point = new_point(4, 5, 6);
    let c: Point = add_points(a, b);
    assert_eq(c.x, 5);
    assert_eq(c.y, 7);
    assert_eq(c.z, 9);
    return 0;
}
extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_block_as_expr();
    test_block_as_expr2();
}

fn test_block_as_expr() {
    let x : i64 = {
        let y : i64 = 42;
        let z : i64 = 43;
        y + z
    };
    assert_eq(x, 85);
}

struct Foo {
    x : i64,
    y : i64,
}

fn make_foo(x: i64, y: i64) -> Foo {
    return Foo { x: x, y: y };
}

fn test_block_as_expr2()  {
    let x : Foo = {
        let x : i64 = 42;
        let y : i64 = 43;
        make_foo(x, y)
    };
    assert_eq(x.x, 42);
    assert_eq(x.y, 43);
}extern "C" fn assert_eq(a: i64, b: i64); 
extern "C" fn print_int(a: i64);

extern "C" fn run_test() {
    test_call_fn_struct();
} 

struct Nested {
    x: i64, y: i64,
}

struct Foo {
    x: i64,
    n: Nested,
    y: i64,
}

fn test_call_fn_struct() -> i64 {
    let foo: Foo = Foo {
        x: 42,
        n: Nested {
            x: 11,
            y: 22,
        },
        y: 33,
    };

    takes_struct(foo);

    return 0;
}

fn takes_struct(foo: Foo) -> i64 {
    assert_eq(foo.x, 42);
    assert_eq(foo.n.x, 11);
    assert_eq(foo.n.y, 22);
    assert_eq(foo.y, 33);

    print_int(foo.n.x);

    return 0;
}
extern "C" fn assert_eq(a: i64, b: i64);
extern "C" fn print_int(a: i64);
extern "C" fn big_blob(a: i64, b: i64);

extern "C" fn run_test() {
    big_blob(3, 4);
    0
}
extern "C" fn assert_eq(a: i64, b: i64);

extern "C" fn run_test() {
    alloc_bigone_and_pass_to_fn_test();    
    test_ref_to_ref();
    test_replace_ref_contents();
    test_mutation_in_pass_by_ref();
    test_refcounting_works();
}

struct Simple {
    x: i64,
    y: i64,
}

struct Simpleton {
    a: Ref<Simple>,
    b: Ref<Simple>,
}

struct BigOne {
    k: Simpleton,
    v: Ref<Simpleton>,
    w: i64,
}

fn takes_bigone(b: BigOne) {
    assert_eq(b.k.a.x, 1);
    assert_eq(b.k.a.y, 2);
    assert_eq(b.k.b.x, 3);
    assert_eq(b.k.b.y, 4);
    assert_eq(b.v.a.x, 5);
    assert_eq(b.v.a.y, 6);
    assert_eq(b.v.b.x, 7);
    assert_eq(b.v.b.y, 8);
    assert_eq(b.w, 9);
}

fn alloc_bigone_and_pass_to_fn_test() {
    let bgo: BigOne = BigOne {
        k: Simpleton {
            a: Ref(Simple { x: 1, y: 2 }),
            b: Ref(Simple { x: 3, y: 4 }),
        },
        v: Ref(Simpleton {
            a: Ref(Simple { x: 5, y: 6 }),
            b: Ref(Simple { x: 7, y: 8 }),
        }),
        w: 9,
    };
    takes_bigone(bgo);
}

// What follows is a list of tests testing the semantics of refs

fn test_ref_to_ref() {
    let s: Simple = Simple { x: 1, y: 2 };
    let r: Ref<Simple> = Ref(s);
    let rr: Ref<Ref<Simple>> = Ref(r);
    assert_eq((*rr).x, 1);
    assert_eq((*rr).y, 2);
}

/// Takes a ref to a struct and replaces its contents with a new struct.
fn test_replace_ref_contents() {
    let r: Ref<Simple> = Ref(Simple { x: 1, y: 2 });
    *r = Simple { x: 3, y: 4 };
    assert_eq(r.x, 3);
    assert_eq(r.y, 4);
}

/// Takes a ref to a struct and a struct by value, and mutates both.
/// The mutation of the ref should be visible outside the function, but the
/// mutation of the struct by value should not.
fn mutate_simple_ref(r: Ref<Simple>, v: Simple) {
    r.x = 42;
    v.x = 42;
}

fn test_mutation_in_pass_by_ref() {
    let s: Simple = Simple { x: 1, y: 2 };
    let r: Ref<Simple> = Ref(s);
    mutate_simple_ref(r, s);
    // The mutation function modified the ref
    assert_eq(r.x, 42);
    // But the struct passed by value was not modified, it was copied into the
    // function
    assert_eq(s.x, 1);
}

/// Tests refcounting by creating a ref to a struct, then copying that ref
/// inside multiple nested blocks. The ref should be dropped only when the last
/// copy is dropped.
fn test_refcounting_works() {
    let r: Ref<Simple> = Ref(Simple { x: 1, y: 2 });
    {
        let r2: Ref<Simple> = r;
        r2.x = r2.x + 1;
        {
            let r3: Ref<Simple> = r2;
            r3.x = r3.x + 1;
            assert_eq(r3.x, 3);
        };
        assert_eq(r2.x, 3);            
    };
    {
        let r4: Ref<Simple> = r;
        r4.x = r4.x + 1;
        assert_eq(r4.x, 4);
    };
    assert_eq(r.x, 4);
}extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_early_return_in_block();
}

fn test_early_return_in_block() -> i64 {
    let x : i64 = {
        {
            return 0;
        }
    };
}
extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_struct_field_access();
}

struct Nested {
    x: i64, y: i64,
}

struct Foo {
    x: i64,
    n: Nested,
    y: i64,
}

fn test_struct_field_access() -> i64 {
    let foo: Foo = Foo {
        x: 42,
        n: Nested {
            x: 11,
            y: 22,
        },
        y: 33,
    };

    // Copy a primitive field out of the struct
    let x: i64 = foo.x;
    assert_eq(x, 42);

    // Access struct fields
    assert_eq(foo.x, 42);
    assert_eq(foo.n.x, 11);
    assert_eq(foo.n.y, 22);
    assert_eq(foo.y, 33);

    // Copy a non-primitive field out of the struct
    let n: Nested = foo.n;

    // Access the copy fields
    assert_eq(n.x, 11);
    assert_eq(n.y, 22);

    // Mutate the field
    n.x = 123;
    assert_eq(n.x, 123);
    assert_eq(foo.n.x, 11);

    // Take pointer to a struct's field
    let n_addr: RawPtr<Nested> = &foo.n;

    // Access fields behind the pointer with manual deref
    assert_eq((*n_addr).x, 11);

    return 0;
}
fn main() -> i64 {
    return 42;
}extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_padding();
}

struct PaddedAf {
    short: u8,
    half: u16,
    int: u32,
    long: u64,
}

struct PaddedAf2Nest {
    short: u8,
    long: u64,
    short2: u8,
}

struct PaddedAf2 {
    nested: PaddedAf2Nest,
    short: u8,
}

fn test_padding() {
    let padded : PaddedAf = PaddedAf {
        short: 11 as u8,
        half: 22 as u16,
        int: 33 as u32,
        long: 44 as u64,
    };
    let ptr : RawPtr<u8> = &padded as RawPtr<u8>;
    assert_eq(*ptr as i64, 11);
    assert_eq(*((ptr + 2) as RawPtr<u16>) as i64, 22);
    assert_eq(*((ptr + 4) as RawPtr<u32>) as i64, 33);
    assert_eq(*((ptr + 8) as RawPtr<u32>) as i64, 44);

    let padded2 : PaddedAf2 = PaddedAf2 {
        nested: PaddedAf2Nest {
            short: 42 as u8,
            long: 43 as u64,
            short2: 44 as u8,
        },
        short: 45 as u8,
    };
    let ptr : RawPtr<u8> = &padded2 as RawPtr<u8>;
    assert_eq(*ptr as i64, 42);
    assert_eq(*((ptr + 8) as RawPtr<u64>) as i64, 43);
    assert_eq(*(ptr + 16) as i64, 44);
    assert_eq(*(ptr + 24) as i64, 45);
}extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_raw_ptr_access_and_arithmetic();    
}

fn test_raw_ptr_access_and_arithmetic() {
    // Z will store the address to the address of x
    let x : i64 = 42;
    let y : RawPtr<i64> = &x;
    let z : RawPtr<RawPtr<i64>> = &y;
    **z = 43;

    assert_eq(**z, 43);

    // Raw pointers can mutably alias each other.
    let k : RawPtr<RawPtr<i64>> = &*z;
    **k = **z + 1;
    **k = **z + 1;
    **k = **z + 1;
    **k = **z + 1;

    assert_eq(**z, 47);
    assert_eq(**k, 47);
}extern "C" fn assert_eq(a: i64, b: i64); 
extern "C" fn rust_alloc(size: i64, align: i64) -> RawPtr<u8>; 
extern "C" fn rust_free(ptr: RawPtr<u8>, size: i64, align: i64); 

extern "C" fn run_test() {
    test_raw_ptr_alloc();
}

fn alloc_i64_array(len: i64) -> RawPtr<i64> {
    return rust_alloc(len * 8, 8) as RawPtr<i64>;
}

fn test_raw_ptr_alloc() -> i64 {
    // Allocate the array
    let buf: RawPtr<i64> = alloc_i64_array(4);

    // Initialize the array
    *buf = 42;
    *(buf + 1) = 84;
    *(buf + 2) = 168;
    *(buf + 3) = 336;

    // Access the elements
    let a : i64 = *(buf+0);
    let b : i64 = *(buf+1);
    let c : i64 = *(buf+2);
    let d : i64 = *(buf+3);

    assert_eq(a, 42);
    assert_eq(b, 84);
    assert_eq(c, 168);
    assert_eq(d, 336);

    rust_free(buf as RawPtr<u8>, 32, 8);

    let result : i64 = a + b + c + d;

    assert_eq(result, 630);

    return a + b + c + d;
}extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_ref_alloc_and_pass_to_fn();
}

struct Bar {
    x: i64,
    n: Ref<Nested>,
}

struct Nested {
    x: i64,
    y: i64,
}

fn takes_ref(bar: Ref<Bar>) -> i64 {
    assert_eq(bar.x, 42);
    assert_eq(bar.n.x, 11);
    assert_eq(bar.n.y, 22);
    bar.n.x = 123;
    return 0;
}

fn test_ref_alloc_and_pass_to_fn() -> i64 {
    let bar: Ref<Bar> = Ref(Bar {
        x: 42,
        n: Ref(Nested {
            x: 11,
            y: 22,
        }),
    });
    takes_ref(bar);
    assert_eq(bar.n.x, 123);
    return 0;
}extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_struct_index_after_alloc();
}

struct Point {
    x: i64,
    y: i64,
    z: i64,
}

fn new_point(x: i64, y: i64, z: i64) -> Point {
    return Point { x: x, y: y, z: z };
}

fn test_struct_index_after_alloc() -> i64 {
    let px: i64 = new_point(1, 2, 3).x;
    assert_eq(px, 1);

    let py: i64 = Point { x: 1, y: 2, z: 3 }.y;
    assert_eq(py, 2);

    return 0;
}extern "C" fn assert_eq(a: i64, b: i64); 

extern "C" fn run_test() {
    test_structs();
}

struct Nested {
    x: i64, y: i64,
}

struct Foo {
    x: i64,
    n: Nested,
    y: i64,
}

fn test_structs() -> i64 {
    // Allocate a struct on the stack using its initializer
    let foo: Foo = Foo {
        x: 42,
        y: 33,
        n: Nested {
            x: 11,
            y: 22
        }
    };

    // Use raw pointers to access the struct fields and check all values
    let x: RawPtr<i64> = &foo as RawPtr<i64>;
    assert_eq(*x, 42);
    assert_eq(*(x + 1), 11);
    assert_eq(*(x + 2), 22);
    assert_eq(*(x + 3), 33);

    // Assignment creates a copy of the struct, doesn't move it
    let bar: Foo = foo;
    let y: RawPtr<i64> = &bar as RawPtr<i64>;
    *(y + 0) = 84;

    assert_eq(*x, 42);
    assert_eq(*y, 84);

    // Dereferencing a pointer to a struct also copies that struct into the stack.
    let doo: RawPtr<Foo> = &bar;
    let baz : Foo = *doo;
    let z : RawPtr<i64> = &baz as RawPtr<i64>;
    *(z + 0) = 168;

    assert_eq(*x, 42);
    assert_eq(*y, 84);
    assert_eq(*z, 168);

    return 0;
}
